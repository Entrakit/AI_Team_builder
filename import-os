import os
import hashlib
from datetime import datetime, timedelta

def get_file_hash(filepath):
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

def cleanup():
    # Find duplicate files
    hash_dict = {}
    for root, _, files in os.walk('.'):
        for filename in files:
            filepath = os.path.join(root, filename)
            file_hash = get_file_hash(filepath)
            if file_hash in hash_dict:
                print(f"Duplicate found: {filepath} and {hash_dict[file_hash]}")
            else:
                hash_dict[file_hash] = filepath

    # Find old files
    current_time = datetime.now()
    for root, _, files in os.walk('.'):
        for filename in files:
            filepath = os.path.join(root, filename)
            mod_time = datetime.fromtimestamp(os.path.getmtime(filepath))
            if current_time - mod_time > timedelta(days=30):
                print(f"Old file found: {filepath}, last modified: {mod_time}")

if __name__ == "__main__":
    cleanup()import os
import hashlib
from datetime import datetime, timedelta

def get_file_hash(filepath):
    with open(filepath, 'rb') as f:
        return hashlib.md5(f.read()).hexdigest()

def cleanup():
    # Find duplicate files
    hash_dict = {}
    for root, _, files in os.walk('.'):
        for filename in files:
            filepath = os.path.join(root, filename)
            file_hash = get_file_hash(filepath)
            if file_hash in hash_dict:
                print(f"Duplicate found: {filepath} and {hash_dict[file_hash]}")
            else:
                hash_dict[file_hash] = filepath

    # Find old files
    current_time = datetime.now()
    for root, _, files in os.walk('.'):
        for filename in files:
            filepath = os.path.join(root, filename)
            mod_time = datetime.fromtimestamp(os.path.getmtime(filepath))
            if current_time - mod_time > timedelta(days=30):
                print(f"Old file found: {filepath}, last modified: {mod_time}")

if __name__ == "__main__":
    cleanup()
